{"name":"Libmad","tagline":"","body":"\r\n libmad - MPEG audio decoder library\r\n Copyright (C) 2000-2004 Underbit Technologies, Inc.\r\n\r\n $Id: README,v 1.4 2004/01/23 09:41:32 rob Exp $\r\n\r\n===============================================================================\r\n\r\nINTRODUCTION\r\n\r\n  MAD (libmad) is a high-quality MPEG audio decoder. It currently supports\r\n  MPEG-1 and the MPEG-2 extension to Lower Sampling Frequencies, as well as\r\n  the so-called MPEG 2.5 format. All three audio layers (Layer I, Layer II,\r\n  and Layer III a.k.a. MP3) are fully implemented.\r\n\r\n  MAD does not yet support MPEG-2 multichannel audio (although it should be\r\n  backward compatible with such streams) nor does it currently support AAC.\r\n\r\n  MAD has the following special features:\r\n\r\n    - 24-bit PCM output\r\n    - 100% fixed-point (integer) computation\r\n    - completely new implementation based on the ISO/IEC standards\r\n    - distributed under the terms of the GNU General Public License (GPL)\r\n\r\n  Because MAD provides full 24-bit PCM output, applications using MAD are\r\n  able to produce high quality audio. Even when the output device supports\r\n  only 16-bit PCM, applications can use the extra resolution to increase the\r\n  audible dynamic range through the use of dithering or noise shaping.\r\n\r\n  Because MAD uses integer computation rather than floating point, it is\r\n  well suited for architectures without a floating point unit. All\r\n  calculations are performed with a 32-bit fixed-point integer\r\n  representation.\r\n\r\n  Because MAD is a new implementation of the ISO/IEC standards, it is\r\n  unencumbered by the errors of other implementations. MAD is NOT a\r\n  derivation of the ISO reference source or any other code. Considerable\r\n  effort has been expended to ensure a correct implementation, even in cases\r\n  where the standards are ambiguous or misleading.\r\n\r\n  Because MAD is distributed under the terms of the GPL, its redistribution\r\n  is not generally restricted, so long as the terms of the GPL are followed.\r\n  This means MAD can be incorporated into other software as long as that\r\n  software is also distributed under the GPL. (Should this be undesirable,\r\n  alternate arrangements may be possible by contacting Underbit.)\r\n\r\n===============================================================================\r\n\r\nABOUT THE CODE\r\n\r\n  The code is optimized and performs very well, although specific\r\n  improvements can still be made. The output from the decoder library\r\n  consists of 32-bit signed linear fixed-point values that can be easily\r\n  scaled for any size PCM output, up to 24 bits per sample.\r\n\r\n  The API for libmad can be found in the `mad.h' header file. Note that this\r\n  file is automatically generated, and will not exist until after you have\r\n  built the library.\r\n\r\n  There are two APIs available, one high-level, and the other low-level.\r\n  With the low-level API, each step of the decoding process must be handled\r\n  explicitly, offering the greatest amount of control. With the high-level\r\n  API, after callbacks are configured, a single routine will decode an\r\n  entire bitstream.\r\n\r\n  The high-level API may either be used synchronously or asynchronously. If\r\n  used asynchronously, decoding will occur in a separate process.\r\n  Communication is possible with the decoding process by passing control\r\n  messages.\r\n\r\n  The file `minimad.c' contains an example usage of the libmad API that\r\n  shows only the bare minimum required to implement a useful decoder. It\r\n  expects a regular file to be redirected to standard input, and it sends\r\n  decoded 16-bit signed little-endian PCM samples to standard output. If a\r\n  decoding error occurs, it is reported to standard error and decoding\r\n  continues. Note that the scale() routine in this code is only provided as\r\n  an example; it rounds MAD's high-resolution samples down to 16 bits, but\r\n  does not perform any dithering or noise shaping. It is therefore not\r\n  recommended to use this routine as-is in your own code if sound quality is\r\n  important.\r\n\r\nInteger Performance\r\n\r\n  To get the best possible performance, it is recommended that an assembly\r\n  version of the fixed-point multiply and related routines be selected.\r\n  Several such assembly routines have been written for various CPUs.\r\n\r\n  If an assembly version is not available, a fast approximation version will\r\n  be used. This will result in reduced accuracy of the decoder.\r\n\r\n  Alternatively, if 64-bit integers are supported as a datatype by the\r\n  compiler, another version can be used that is much more accurate.\r\n  However, using an assembly version is generally much faster and just as\r\n  accurate.\r\n\r\n  More information can be gathered from the `fixed.h' header file.\r\n\r\n  MAD's CPU-intensive subband synthesis routine can be further optimized at\r\n  the expense of a slight loss in output accuracy due to a modified method\r\n  for fixed-point multiplication with a small windowing constant. While this\r\n  is helpful for performance and the output accuracy loss is generally\r\n  undetectable, it is disabled by default and must be explicitly enabled.\r\n\r\n  Under some architectures, other special optimizations may also be\r\n  available.\r\n\r\nAudio Quality\r\n\r\n  The output from MAD has been found to satisfy the ISO/IEC 11172-4\r\n  computational accuracy requirements for compliance. In most\r\n  configurations, MAD is a Full Layer III ISO/IEC 11172-3 audio decoder as\r\n  defined by the standard.\r\n\r\n  When the approximation version of the fixed-point multiply is used, MAD is\r\n  a limited accuracy ISO/IEC 11172-3 audio decoder as defined by the\r\n  standard.\r\n\r\n  MAD can alternatively be configured to produce output with less or more\r\n  accuracy than the default, as a tradeoff with performance.\r\n\r\n  MAD produces output samples with a precision greater than 24 bits. Because\r\n  most output formats use fewer bits, typically 16, it is recommended that a\r\n  dithering algorithm be used (rather than rounding or truncating) to obtain\r\n  the highest quality audio. However, dithering may unfavorably affect an\r\n  analytic examination of the output (such as compliance testing); you may\r\n  therefore wish to use rounding in this case instead.\r\n\r\nPortability Issues\r\n\r\n  GCC is preferred to compile the code, but other compilers may also work.\r\n  The assembly code in `fixed.h' depends on the inline assembly features of\r\n  your compiler. If you're not using GCC or MSVC++, you can either write\r\n  your own assembly macros or use the default (low quality output) version.\r\n\r\n  The union initialization of `huffman.c' may not be portable to all\r\n  platforms when GCC is not used.\r\n\r\n  The code should not be sensitive to word sizes or byte ordering, however\r\n  it does assume A % B has the same sign as A.\r\n\r\n===============================================================================\r\n\r\nBUILDING AND INSTALLING\r\n\r\nWindows Platforms\r\n\r\n  MAD can be built under Windows using either MSVC++ or Cygwin. A MSVC++\r\n  project file can be found under the `msvc++' subdirectory.\r\n\r\n  To build libmad using Cygwin, you will first need to install the Cygwin\r\n  tools:\r\n\r\n      http://www.cygwin.com/\r\n\r\n  You may then proceed with the following POSIX instructions within the\r\n  Cygwin shell.\r\n\r\n  Note that by default Cygwin will build a library that depends on the\r\n  Cygwin DLL. You can use MinGW to build a library that does not depend on\r\n  the Cygwin DLL. To do so, give the option --host=mingw32 to `configure'.\r\n\r\nPOSIX Platforms (including Cygwin)\r\n\r\n  The code is distributed with a `configure' script that will generate for\r\n  you a `Makefile' and a `config.h' for your platform. See the file\r\n  `INSTALL' for generic instructions.\r\n\r\n  The specific options you may want to give `configure' are:\r\n\r\n      --enable-speed            optimize for speed over accuracy\r\n\r\n      --enable-accuracy         optimize for accuracy over speed\r\n\r\n      --disable-debugging       do not compile with debugging support, and\r\n                                use more optimizations\r\n\r\n      --disable-shared          do not build a shared library\r\n\r\n  Note that you need not specify one of --enable-speed or --enable-accuracy;\r\n  in its default configuration, MAD is optimized for both. You should only\r\n  use one of these options if you wish to compromise speed or accuracy for\r\n  the other.\r\n\r\n  By default the package will build a shared library if possible for your\r\n  platform. If you want only a static library, use --disable-shared.\r\n\r\n  It is not normally necessary to use the following options, but you may\r\n  fine-tune the configuration with them if desired:\r\n\r\n      --enable-fpm=ARCH         use the ARCH-specific version of the\r\n                                fixed-point math assembly routines\r\n                                (current options are: intel, arm, mips,\r\n                                sparc, ppc; also allowed are: 64bit, approx)\r\n\r\n      --enable-sso              use the subband synthesis optimization,\r\n                                with reduced accuracy\r\n\r\n      --disable-aso             do not use certain architecture-specific\r\n                                optimizations\r\n\r\n  By default an appropriate fixed-point assembly routine will be selected\r\n  for the configured host type, if it can be determined. Thus if you are\r\n  cross-compiling for another architecture, you should be sure either to\r\n  give `configure' a host type argument (--host) or to use an explicit\r\n  --enable-fpm option.\r\n\r\n  If an appropriate assembly routine cannot be determined, the default\r\n  approximation version will be used. In this case, use of an alternate\r\n  --enable-fpm is highly recommended.\r\n\r\nExperimenting and Developing\r\n\r\n  Further options for `configure' that may be useful to developers and\r\n  experimenters are:\r\n\r\n      --enable-debugging        enable diagnostic debugging support and\r\n                                debugging symbols\r\n\r\n      --enable-profiling        generate `gprof' profiling code\r\n\r\n      --enable-experimental     enable code using the EXPERIMENTAL\r\n                                preprocessor define\r\n\r\n===============================================================================\r\n\r\nCOPYRIGHT\r\n\r\n  Please read the `COPYRIGHT' file for copyright and warranty information.\r\n  Also, the file `COPYING' contains the full text of the GNU GPL.\r\n\r\n  Send inquiries, comments, bug reports, suggestions, patches, etc. to:\r\n\r\n      Underbit Technologies, Inc. <support@underbit.com>\r\n\r\n  See also the MAD home page on the Web:\r\n\r\n      http://www.underbit.com/products/mad/\r\n\r\n===============================================================================\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}